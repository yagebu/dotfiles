#!/usr/bin/env python3

import datetime
from pathlib import Path
import subprocess

import click


TODAY = str(datetime.date.today())


@click.group()
def cli():
    pass


def run(cmd):
    """Run the given command in the home directory."""
    print(f'Running: {cmd}')
    subprocess.run(cmd, shell=True, cwd=Path.home())


def create(args):
    """Run the given command in the home directory."""
    full_args = ['borg', 'create', '-p'] + args
    print(f'Running: {full_args}')
    subprocess.run(full_args, cwd=Path.home())


@cli.command()
def prune():
    """Prune old backups.

    For the main document backups, keep 60 daily ones and unlimited weekly
    ones. Keep 2 VM backups.
    """

    click.secho('Pruning VMs', fg='green')
    run('borg prune -v --list --prefix 20 -H2 ks:backup/vm')

    # The prefix ensures that only the usual daily backups are pruned.
    click.secho('Pruning js-arch', fg='green')
    run('borg prune -v --list --prefix 20 -d60 -w-1 ks:backup/js-arch')


@cli.command()
@click.argument('repos', nargs=-1)
def check(repos):
    """Check backups."""
    if not repos:
        repos = ['js-arch', 'js-mba', 'vm', 'pictures', 'raw']

    for repo in repos:
        click.secho(f'Checking {repo}', fg='green')
        run(f'borg check -v ks:backup/{repo}')


@cli.command()
def pictures():
    """Backup pictures."""
    create([f'ks:backup/pictures::{TODAY}', 'Pictures'])


@cli.command()
def raw():
    """Backup RAW photos."""
    create([f'ks:backup/raw::{TODAY}', 'var/RAW', 'var/panoramas'])


@cli.command()
def vms():
    """Backup VMs."""
    create([f'ks:backup/vm::{TODAY}', '-C', 'zlib', 'var/VMs'])


@cli.command()
def store():
    """Save Backup and Music to external harddrive."""
    drive = '/run/media/jakob/Quickstore'
    run(f'rsync -avz --inplace --progress --delete ks:Music/FLAC/ {drive}/Music')
    run(f'rsync -avz --progress --delete ks:backup/ {drive}/backup')


if __name__ == '__main__':
    cli()
